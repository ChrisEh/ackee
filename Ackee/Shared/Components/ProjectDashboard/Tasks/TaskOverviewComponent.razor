@using Ackee.Data.Model
@using Ackee.Shared.Services
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@inject Ackee.Shared.Services.SortService SortService
@inject Ackee.Shared.Services.FilterService FilterService

@if (AllTasks != null)
{
    <div class="taskOverview">
        <div class="taskOverview_header">
            @*<h1>Task Overview</h1>*@
            <button class="button button_actionButton button_round button_padding button_fontSmaller button_uppercase" @onclick="NavigateToCreateTaskPage">Create Task</button>
        </div>

        <div class="taskOverview_filterBox">
            <div class="filterBox_searchBar">
                <p>
                    <label for="searchField">Search: </label>
                    <input id="searchField" @onchange="@FilterTasks" class="filterBox_searchBar_searchField" />
                </p>
                <p>
                    You can use this searchbar to filter the tasks on name, assignees or milestones!
                </p>
            </div>
            <div class="filterBox_orderBy">
                <p>
                    <label for="orderByField">Order by:</label>
                    <select id="orderByField" class="filterBox_orderBy_orderByField" @onchange="@SortTasks">
                        @foreach(var option in SortService.GetOrderOptions())
                        {
                            <option value="@option.Value">@option.Text</option>
                        }
                    </select>
                </p>
            </div>
        </div>

        <TaskTableComponent Tasks="@filteredTasks" ProjectId="@ProjectId" />
    </div>
}

@code {
    [Parameter]
    public List<AspNetTasks> AllTasks { get; set; }

    [Parameter]
    public string ProjectId { get; set; }

    private List<AspNetTasks> filteredTasks = null;
    private List<AspNetTasks> sortedTasks = null;
    private string searchTerm = "";

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        filteredTasks = AllTasks;
        sortedTasks = AllTasks;
    }

    private void NavigateToCreateTaskPage()
    {
        NavigationManager.NavigateTo($"/projects/{ProjectId}/tasks/create");
    }

    private void SortTasks(ChangeEventArgs e)
    {
        sortedTasks = SortService.OrderTasksBy(AllTasks, e.Value.ToString());
        filteredTasks = SortService.OrderTasksBy(filteredTasks, e.Value.ToString());
    }

    private void FilterTasks(ChangeEventArgs e)
    {
        filteredTasks = FilterService.FindInTasks(sortedTasks, e.Value.ToString());
    }
}
