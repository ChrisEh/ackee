@using System.Threading
@using Ackee.Data.Model
@using Ackee.Shared.Components.ProjectDashboard.Tasks.CreateTaskForm.MilestoneListItem
@using Ackee.Shared.Components.ProjectDashboard.Tasks.CreateTaskForm.AssigneeListItem
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager

<div class="createTaskForm">
    <EditForm Model="@createFormModel" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        @if (!string.IsNullOrEmpty(_statusMessage))
        {
            <p>@_statusMessage</p>
        }

        <p>
            <label class="d-block" for="taskName">Name: </label>
            <InputText class="createTaskForm_taskName" id="taskName" @bind-Value="createFormModel.TaskName" />
        </p>

        <p>
            <label class="d-block" for="taskDescription">Description: </label>
            <InputTextArea class="createTaskForm_taskDescription" id="taskDescription" @bind-Value="createFormModel.TaskDescription" />
        </p>

        <div class="createTaskForm_startDateAndEndDate">
            <p>
                <label class="d-block" for="taskStartDate">Start date: </label>
                <InputDate class="createTaskForm_taskStartDate" id="taskStartDate" @bind-Value="createFormModel.TaskStartDate" />
            </p>
            <p class="createTaskForm_marginLeftOnBigScreens">
                <label class="d-block" for="taskEndDate">End date: </label>
                <InputDate class="createTaskForm_taskEndDate" id="taskEndDate" @bind-Value="createFormModel.TaskEndDate" />
            </p>

            <p class="createTaskForm_marginLeftOnBigScreens">
                <label class="d-block" for="taskCompleted">Completed: </label>
                <InputCheckbox class="createTaskForm_taskCompleted" id="taskCompleted" @bind-Value="createFormModel.TaskCompleted" />
            </p>
        </div>

        @* Add Milestones to task *@
        <hr class="my-2" />
        <h1>Assign milestones to the task</h1>
        <select @onchange="@AddMilestone">
            <option value="EMPTY"> -- Select a milestone -- </option>
            @foreach (var milestone in Milestones)
            {
                <option value="@milestone.MilestoneName">@milestone.MilestoneName</option>
            }
        </select>

        @if (assignedMilestones.Count > 0)
        {
            @foreach (var milestone in assignedMilestones)
            {
                <MilestoneListItemComponent Milestone="@milestone" OnMilestoneRemovedSuccessfully="() => RemoveMilestone(milestone)" />
            }
        }

        @* Add Members to task *@
        <hr class="my-2" />
        <h1>Assign members to the task</h1>
        <select @onchange="@AddAssignee">
            <option value="EMPTY"> -- Select a milestone -- </option>
            @foreach (var member in Members)
            {
                <option value="@member.Email">@member.Email</option>
            }
        </select>

        @if (assignees.Count > 0)
        {
            @foreach (var assignee in assignees)
            {
                <AssigneeListItemComponent User="@assignee" OnAssigneeRemovedSuccessfully="() => RemoveAssignee(assignee)" />
            }
        }

        <hr class="my-2" />

        <button class="button button_actionButton button_padding" type="submit">Submit</button>

    </EditForm>
</div>



@code {
    [Parameter]
    public AspNetProjects Project { get; set; }

    [Parameter]
    public List<AspNetMilestones> Milestones { get; set; }

    [Parameter]
    public List<ApplicationUser> Members { get; set; }

    private CreateFormModel createFormModel = new CreateFormModel();
    private string _statusMessage = "";
    private AspNetTasks task = null;
    private List<ApplicationUser> assignees = new List<ApplicationUser>();
    private List<AspNetMilestones> assignedMilestones = new List<AspNetMilestones>();

    private async Task CreateTask()
    {
        try
        {
            AspNetTasks newTask = new AspNetTasks();
            newTask.TaskName = createFormModel.TaskName;
            newTask.TaskDescription = createFormModel.TaskDescription;
            newTask.StartDate = createFormModel.TaskStartDate;
            newTask.EndDate = createFormModel.TaskEndDate;
            newTask.Project = Project;

            await (new HttpClient()).PostJsonAsync<bool>($"http://localhost:53508/api/tasks", newTask);

            if (assignedMilestones.Count > 0)
            {
                foreach (var milestone in assignedMilestones)
                {
                    await (new HttpClient()).PostJsonAsync<bool>($"http://localhost:53508/api/tasks/{newTask.TaskName}/milestones", milestone.MilestoneID);
                }
            }

            if (assignees.Count > 0)
            {
                foreach (var assignee in assignees)
                {
                    await (new HttpClient()).PostJsonAsync<bool>($"http://localhost:53508/api/tasks/{newTask.TaskName}/assignees", assignee.Id);
                }
            }

            NavigationManager.NavigateTo($"/projects/{Project.ProjectID}/tasks");
        }
        catch (Exception e)
        {
            _statusMessage = "Something went wrong:\n" + e.Message;
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async void HandleValidSubmit()
    {
        await CreateTask();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        createFormModel.TaskName = "";
        createFormModel.TaskDescription = "";
        createFormModel.TaskStartDate = DateTime.Now;
        createFormModel.TaskEndDate = DateTime.Now;
        createFormModel.TaskCompleted = false;
    }

    private void AddMilestone(ChangeEventArgs e)
    {
        if (!assignedMilestones.Exists(m => m.MilestoneName == e.Value.ToString()) && !e.Value.ToString().Equals("EMPTY"))
        {
            assignedMilestones.Add(Milestones.First(m => m.MilestoneName == e.Value.ToString()));
        }
        StateHasChanged();
    }

    private void RemoveMilestone(AspNetMilestones milestone)
    {
        assignedMilestones.Remove(milestone);
        StateHasChanged();
    }

    private void AddAssignee(ChangeEventArgs e)
    {
        if (!assignees.Exists(a => a.Email == e.Value.ToString()) && !e.Value.ToString().Equals("EMPTY"))
        {
            assignees.Add(Members.First(m => m.Email == e.Value.ToString()));
        }

        StateHasChanged();
    }

    private void RemoveAssignee(ApplicationUser assignee)
    {
        assignees.Remove(assignee);
        StateHasChanged();
    }
}
