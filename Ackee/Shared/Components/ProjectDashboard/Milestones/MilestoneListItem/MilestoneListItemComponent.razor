@using Ackee.Data.Model
@using Ackee.Shared.Components.UI.ProgressBar
@inject Ackee.Shared.Services.DateTimeService DateService

@if (Milestone != null)
{
    <NavLink href=@($"projects/{ProjectId}/milestones/{Milestone.MilestoneID}")>
        <div class="milestoneListItem">
            <div class="milestone_info">
                <h1>@Milestone.MilestoneName</h1>
                <p class="date">Expires on @DateService.GetDateAsString("D", Milestone.EndDate)</p>
                <p>Status: <span class="status @DetermineStatus()">@DetermineStatus()</span></p>
            </div>
            <div class="milestone_progress_info">
                @if (milestoneTasks != null)
                {
                    <p>Progress: @($"{NumberOfCompletedTasks()} / {milestoneTasks.Count} tasks completed")</p>
                    <ProgressBarComponent Total="@milestoneTasks.Count"
                                          Completed="@NumberOfCompletedTasks()" />
                }
            </div>
        </div>
    </NavLink>    
}

@code {
    [Parameter]
    public AspNetMilestones Milestone { get; set; }

    [Parameter]
    public string ProjectId { get; set; }

    private List<AspNetTasks> milestoneTasks = null;

    protected override async Task OnInitializedAsync()
    {
        await RefreshTasks();
    }

    private async Task RefreshTasks()
    {
        milestoneTasks = await (new HttpClient()).GetJsonAsync<List<AspNetTasks>>($"http://localhost:53508/api/projects/{ProjectId}/milestones/{Milestone.MilestoneID}/tasks");
    }

    private string DetermineStatus()
    {
        if (Milestone.Completed)
        {
            return "completed";
        }
        else if (DateTime.Today.CompareTo(Milestone.EndDate) < 1)
        {
            return "open";
        }

        return "expired";
    }

    private int NumberOfCompletedTasks()
    {
        return milestoneTasks.Where(t => t.Completed).ToList().Count;
    }
}
