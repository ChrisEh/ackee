@using Ackee.Data.Model
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager

<div class="updateMilestoneForm">
    <EditForm Model="@updateFormModel" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <h1>Milestone Details</h1>

        @if (!string.IsNullOrEmpty(statusMessage))
        {
            <p>@statusMessage</p>
        }

        <p>
            <label for="milestoneName">Milestone Name: </label>
            <InputText class="updateMilestoneForm_milestoneName" id="milestoneName" @bind-Value="updateFormModel.MilestoneName" />
        </p>

        <p>
            <label for="milestoneDescription">Milestone Description: </label>
            <InputTextArea class="updateMilestoneForm_milestoneDescription" id="milestoneDescription" @bind-Value="updateFormModel.MilestoneDescription" />
        </p>


        <p>
            <label for="milestoneEndDate">Milestone End Date: </label>
            <InputDate class="updateMilestoneForm_milestoneEndDate" id="milestoneEndDate" @bind-Value="updateFormModel.MilestoneEndDate" />
        </p>

        <p>
            <label for="milestoneCompleted">Milestone Completed: </label>
            <InputCheckbox class="updateMilestoneForm_milestoneCompleted" id="milestoneCompleted" @bind-Value="updateFormModel.MilestoneCompleted" />
        </p>


        <div class="updateMilestoneForm_updateAndDeleteButtons">
            <button class="button button_actionButton button_padding" type="submit">Update Milestone</button>
            <div class="button button_actionButton button_padding bg-danger"
                 @onclick="async () => await DeleteMilestone()">Delete Milestone</div>
        </div>


    </EditForm>
</div>





@code {
    [Parameter]
    public AspNetMilestones Milestone { get; set; }

    [Parameter]
    public string ProjectId { get; set; }

    private UpdateFormModel updateFormModel = new UpdateFormModel();
    private string statusMessage = null;
    private bool success = false;

    private async Task UpdateMilestone()
    {
        try
        {
            Milestone.MilestoneName = updateFormModel.MilestoneName;
            Milestone.Description = updateFormModel.MilestoneDescription;
            Milestone.EndDate = updateFormModel.MilestoneEndDate;
            Milestone.Completed = updateFormModel.MilestoneCompleted;

            success = await (new HttpClient()).PutJsonAsync<bool>($"http://localhost:53508/api/milestones/{Milestone.MilestoneID}", Milestone);
            statusMessage = "Milestone updated successfully!";
        }
        catch (Exception e)
        {
            statusMessage = "Something went wrong:\n" + e.Message;
        }
        finally
        {
            StateHasChanged();
        }
    }

    private async Task DeleteMilestone()
    {
        await (new HttpClient()).DeleteAsync($"http://localhost:53508/api/milestones/{Milestone.MilestoneID}");
        NavigationManager.NavigateTo($"/projects/{ProjectId}/milestones");
    }

    private async void HandleValidSubmit()
    {
        await UpdateMilestone();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        updateFormModel.MilestoneName = Milestone.MilestoneName;
        updateFormModel.MilestoneDescription = Milestone.Description;
        updateFormModel.MilestoneEndDate = Milestone.EndDate;
        updateFormModel.MilestoneCompleted = Milestone.Completed;
    }
}
