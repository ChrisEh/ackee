@page "/projects/{Id}/calendar"
@using Ackee.Data.Model
@using Ackee.Shared.Components.ProjectDashboard.Calendar.WeekOverview
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@inject Ackee.Shared.Services.TaskService TaskService
@inject Ackee.Shared.Services.DateTimeService DateTimeService

@if (project != null)
{
    <DashboardLayout Project="@project" 
                     PageName="calendar"
                     PageRoute="@($"/projects/{Id}/calendar")"
                     PageRouteCustomIndexes=@(new List<int> { 1 })
                     PageRouteCustomNames=@(new List<string>() { project.ProjectName })>
        <div class="calendar_content">
            <div class="calendar_selectWeek">
                <div class="calendar_selectWeek_buttons">
                    <div class="button button_actionButton button_fontSmaller button_padding"
                         @onclick="@DecrementWeek">
                        Previous week
                    </div>

                    <div class="button button_actionButton button_fontSmaller button_padding"
                         @onclick="@IncrementWeek">
                        Next week
                    </div>
                </div>
                <div class="calendar_selectWeek_currentWeek">
                    <h1>
                        @($"{firstDayOfWeek.DayOfWeek.ToString()}, {DateTimeService.GetDateAsString("MMM dd, yyyy", firstDayOfWeek)} until {lastDayOfWeek.DayOfWeek.ToString()}, {DateTimeService.GetDateAsString("MMM dd, yyyy", lastDayOfWeek)}")
                    </h1>
                </div>
            </div>

            @if(tasksPerDay != null)
            {
                <WeekOverviewComponent TasksPerDay="@tasksPerDay" />
            }            
        </div>
    </DashboardLayout>
}

@code {
    [CascadingParameter]
    Task<AuthenticationState> authenticationStateTask { get; set; }

    [Parameter]
    public string Id { get; set; }

    private AspNetProjects project = null;
    private List<AspNetTasks> tasks = null;
    private List<List<AspNetTasks>> tasksPerDay = null;
    private int currentWeek = 0;
    private DateTime firstDayOfWeek;
    private DateTime lastDayOfWeek;
    private ApplicationUser currentUser = null;
    System.Security.Claims.ClaimsPrincipal CurrentUser;

    // Get project object by project ID. If loaded, display it.
    protected override async Task OnInitializedAsync()
    {
        CurrentUser = (await authenticationStateTask).User;
        await RefreshUser();
        await RefreshProject();
        await RefreshTasks();
        StateHasChanged();
    }

    private async Task RefreshProject()
    {
        project = null;
        project = await (new HttpClient()).GetJsonAsync<AspNetProjects>($"http://localhost:53508/api/projects/{Id}");


        if (!CurrentUserIsMemberOfProject())
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task RefreshUser()
    {
        currentUser = await (new HttpClient()).GetJsonAsync<ApplicationUser>($"http://localhost:53508/api/users/{CurrentUser.Identity.Name}");
    }

    private async Task RefreshTasks()
    {
        tasks = await (new HttpClient()).GetJsonAsync<List<AspNetTasks>>($"http://localhost:53508/api/projects/{Id}/tasks");
        tasksPerDay = TaskService.GetTasksByWeekNrGroupedByDay(tasks, currentWeek);
        firstDayOfWeek = DateTimeService.GetAllDatesPerWeek(currentWeek).First();
        lastDayOfWeek = DateTimeService.GetAllDatesPerWeek(currentWeek).Last();
    }

    private bool CurrentUserIsMemberOfProject()
    {
        foreach (var userProject in project.UserProjects)
        {
            if (currentUser.Id == userProject.UserId)
            {
                return true;
            }
        }

        return false;
    }

    private void IncrementWeek()
    {
        currentWeek++;
        tasksPerDay = TaskService.GetTasksByWeekNrGroupedByDay(tasks, currentWeek);
        firstDayOfWeek = DateTimeService.GetAllDatesPerWeek(currentWeek).First();
        lastDayOfWeek = DateTimeService.GetAllDatesPerWeek(currentWeek).Last();
        StateHasChanged();
    }

    private void DecrementWeek()
    {
        currentWeek--;
        tasksPerDay = TaskService.GetTasksByWeekNrGroupedByDay(tasks, currentWeek);
        firstDayOfWeek = DateTimeService.GetAllDatesPerWeek(currentWeek).First();
        lastDayOfWeek = DateTimeService.GetAllDatesPerWeek(currentWeek).Last();
        StateHasChanged();
    }
}
