@page "/projects/{ProjectId}/milestones/{MilestoneId}"
@using Ackee.Data.Model
@using Ackee.Shared.Components.UI.Spinner
@using Ackee.Shared.Components.ProjectDashboard.Milestones.UpdateMilestoneForm
@using Ackee.Shared.Components.ProjectDashboard.Tasks
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager

@if (milestone != null)
{

    <DashboardLayout Project="@project"
                     PageName="@milestone.MilestoneName"
                     PageRoute="@($"/projects/{ProjectId}/milestones/{MilestoneId}")"
                     PageRouteCustomIndexes=@(new List<int> { 1, 3 })
                     PageRouteCustomNames=@(new List<string>() { project.ProjectName, milestone.MilestoneName })>
        <div class="milestone">
            <div class="milestone_header">
                <div class="milestone_navigation">
                    <ul>
                        <li class="@(selectedTab.Equals("INFO") ? "active" : "")" @onclick='() => OnSelectTab("INFO")'>
                            INFO
                        </li>
                        <li class="@(selectedTab.Equals("TASKS") ? "active" : "")" @onclick='() => OnSelectTab("TASKS")'>
                            TASKS
                        </li>
                    </ul>
                </div>
            </div>

            <div class="milestone_content">
                @if (selectedTab.Equals("INFO"))
                {
                    <UpdateMilestoneFormComponent Milestone="@milestone" ProjectId="@ProjectId" />
                }
                else
                {
                    // Task Table
                    if (milestoneTasks != null)
                    {
                        <TaskTableComponent ProjectId="@ProjectId" Tasks="@milestoneTasks" />
                    }
                }
            </div>

        </div>
    </DashboardLayout>

}
else
{
    <SpinnerComponent />
}

@code {
    [CascadingParameter]
    Task<AuthenticationState> authenticationStateTask { get; set; }

    [Parameter]
    public string ProjectId { get; set; }

    [Parameter]
    public string MilestoneId { get; set; }

    private AspNetMilestones milestone = null;
    private AspNetProjects project = null;
    private ApplicationUser currentUser = null;
    System.Security.Claims.ClaimsPrincipal CurrentUser;
    private string selectedTab = "INFO";
    private List<AspNetTasks> milestoneTasks = null;

    // Get project object by project ID. If loaded, display it.
    protected override async Task OnInitializedAsync()
    {
        CurrentUser = (await authenticationStateTask).User;
        await RefreshUser();
        await RefreshProject();
        await RefreshMilestone();
        await RefreshTasks();
    }

    private async Task RefreshMilestone()
    {
        milestone = await (new HttpClient()).GetJsonAsync<AspNetMilestones>($"http://localhost:53508/api/milestones/{MilestoneId}");
        StateHasChanged();
    }

    private async Task RefreshProject()
    {
        project = await (new HttpClient()).GetJsonAsync<AspNetProjects>($"http://localhost:53508/api/projects/{ProjectId}");

        if (!CurrentUserIsMemberOfProject())
        {
            NavigationManager.NavigateTo("/");
        }
        StateHasChanged();
    }

    private async Task RefreshTasks()
    {
        milestoneTasks = await (new HttpClient()).GetJsonAsync<List<AspNetTasks>>($"http://localhost:53508/api/projects/{ProjectId}/milestones/{MilestoneId}/tasks");
    }

    private async Task RefreshUser()
    {
        currentUser = await (new HttpClient()).GetJsonAsync<ApplicationUser>($"http://localhost:53508/api/users/{CurrentUser.Identity.Name}");
        StateHasChanged();
    }

    private bool CurrentUserIsMemberOfProject()
    {
        foreach (var userProject in project.UserProjects)
        {
            if (currentUser.Id == userProject.UserId)
            {
                return true;
            }
        }

        return false;
    }

    private void OnSelectTab(string tab)
    {
        selectedTab = tab;
    }
}
