@page "/project/{Id}/milestones"
@using Ackee.Data.Model
@using Ackee.Shared.Components.ProjectDashboard.Milestones
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager

@if (project != null)
{
    <DashboardLayout Project="@project" PageName="milestones">
        <div class="milestones_content">
            <MilestoneOverviewComponent ProjectId="@project.ProjectID"
                                        Milestones="@milestones"
                               OnMilestonesUpdated="async () => await RefreshMilestones()" />
        </div>
    </DashboardLayout>
}

@code {
    [CascadingParameter]
    Task<AuthenticationState> authenticationStateTask { get; set; }

    [Parameter]
    public string Id { get; set; }

    private AspNetProjects project = null;
    private List<AspNetMilestones> milestones = null;

    private ApplicationUser currentUser = null;
    System.Security.Claims.ClaimsPrincipal CurrentUser;

    // Get project object by project ID. If loaded, display it.
    protected override async Task OnInitializedAsync()
    {
        CurrentUser = (await authenticationStateTask).User;
        await RefreshUser();
        await RefreshProject();
        await RefreshMilestones();
    }

    private async Task RefreshProject()
    {
        project = await (new HttpClient()).GetJsonAsync<AspNetProjects>($"https://ackee.azurewebsites.net/api/projects/{Id}");

        if (!CurrentUserIsMemberOfProject())
        {
            NavigationManager.NavigateTo("/");
        }
        StateHasChanged();
    }

    private async Task RefreshMilestones()
    {
        milestones = await (new HttpClient()).GetJsonAsync<List<AspNetMilestones>>($"https://ackee.azurewebsites.net/api/projects/{project.ProjectID}/milestones");
        StateHasChanged();
    }

    private async Task RefreshUser()
    {
        currentUser = await (new HttpClient()).GetJsonAsync<ApplicationUser>($"https://ackee.azurewebsites.net/api/users/{CurrentUser.Identity.Name}");
        StateHasChanged();
    }

    private bool CurrentUserIsMemberOfProject()
    {
        foreach (var userProject in project.UserProjects)
        {
            if (currentUser.Id == userProject.UserId)
            {
                return true;
            }
        }

        return false;
    }
}
